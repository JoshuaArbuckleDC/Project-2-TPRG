import socket
import os
import json
import time
import tkinter as tk

# Function to retrieve system information
def get_system_info():
    core_temp = os.popen('vcgencmd measure_temp').readline().strip()[5:]
    voltage = os.popen('vcgencmd measure_volts').readline().strip()
    arm_clock_freq = os.popen('vcgencmd measure_clock arm').readline().strip()[14:]
    disk_usage = os.popen('df -h /').readlines()[1].split()[4]
    gpu_temp = os.popen('vcgencmd measure_temp').readline().strip()[5:]  # Get GPU temperature
    return {
        "Core Temperature": core_temp,
        "Voltage": voltage,
        "ARM Clock Frequency": arm_clock_freq,
        "Disk Usage": disk_usage,
        "GPU Temperature": gpu_temp

# Function to create a data packet containing system information and iteration count
def create_data_packet(iteration_count):
    system_info = get_system_info()
    data = {
        "Iteration Count": iteration_count,
        **system_info
    }
    return data

# Function to send data to the server
def send_data_to_server(data, server_socket):
    try:
        json_data = json.dumps(data)
        server_socket.send(json_data.encode('utf-8'))
        return True
    except Exception as e:
        print(f"Error sending data: {str(e)}")
        return False

# Main function to run the client
def main():
    host = '192.168.2.30'  # Server IP address
    port = 5005
    iteration_count = 0

    # Create a GUI window for connection status
    root = tk.Tk()
    root.title("Client Status")
    connection_label = tk.Label(root, text="Not Connected", fg="red")
    connection_label.pack()

    # Create a socket and connect to the server
    s = socket.socket()
    try:
        s.connect((host, port))
        connection_label.config(text="Connected", fg="green")
    except ConnectionRefusedError:
        print("Error: Server is not running.")
        connection_label.config(text="Error: Server not running", fg="red")
        return

    # Send data to the server in a loop
    while iteration_count < 51:
        data = create_data_packet(iteration_count)
        if send_data_to_server(data, s):
            iteration_count += 1
            time.sleep(2)  # Sample data every 2 seconds

    # Close the socket and destroy the GUI window
    s.close()
    root.destroy()

if __name__ == "__main__":
    main()
